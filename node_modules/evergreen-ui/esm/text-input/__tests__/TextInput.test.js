import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState } from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { TextInput } from '../';
import { mockRef } from '../../test/utils';

function makeTextInputFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(TextInput, _extends({
    "data-testid": "input"
  }, props));
}

makeTextInputFixture.displayName = "makeTextInputFixture";
describe('TextInput', function () {
  it('should forward ref to underlying <input />', function () {
    var ref = mockRef();
    render(makeTextInputFixture({
      ref: ref
    }));
    expect(ref.current).toBeInstanceOf(HTMLInputElement);
  });
  it('should render without crashing', function () {
    expect(function () {
      return render(makeTextInputFixture());
    }).not.toThrow();
  });
  it('should accept placeholder text', function () {
    var _render = render(makeTextInputFixture({
      placeholder: 'Enter text here'
    })),
        getByPlaceholderText = _render.getByPlaceholderText;

    expect(getByPlaceholderText('Enter text here')).toBeInTheDocument();
  });
  it('should set an invalid state if `isInvalid` is `true`', function () {
    var _render2 = render(makeTextInputFixture({
      isInvalid: true
    })),
        getByTestId = _render2.getByTestId;

    var input = getByTestId('input');
    expect(input).toHaveAttribute('aria-invalid', 'true');
  });
  it('should accept an `onChange` handler to be a controlled component', function () {
    function ControlledTextInput() {
      var _useState = useState(''),
          _useState2 = _slicedToArray(_useState, 2),
          value = _useState2[0],
          setValue = _useState2[1];

      return /*#__PURE__*/React.createElement(TextInput, {
        "data-testid": "input",
        placeholder: "Enter text here",
        value: value,
        onChange: function onChange(e) {
          return setValue(e.target.value);
        }
      });
    }

    var _render3 = render( /*#__PURE__*/React.createElement(ControlledTextInput, null)),
        getByDisplayValue = _render3.getByDisplayValue,
        getByTestId = _render3.getByTestId;

    var input = getByTestId('input');
    userEvent.click(input);
    expect(document.activeElement).toEqual(input);
    userEvent.type(input, 'Testing');
    expect(getByDisplayValue('Testing')).toEqual(input);
  });
  it('should not be interactive if `disabled` is passed in', function () {
    var _render4 = render(makeTextInputFixture({
      disabled: true
    })),
        getByDisplayValue = _render4.getByDisplayValue,
        getByTestId = _render4.getByTestId;

    var input = getByTestId('input');
    userEvent.type(input, 'Testing');
    expect(function () {
      return getByDisplayValue('Testing');
    }).toThrowError();
    expect(getByDisplayValue('')).toEqual(input);
  });
});